struct Node* get_nodes(int * b, double * c, int * f, int n);
struct Prob* get_prob(int D, int * b, double * c, int * f, int n);
struct P3struct * P3(double lambda, Node * nodes, int n, int D, int * z, P3struct * P3L, int sizeP3L);
struct P3struct * P3search(Prob *pr, Node *nodes,  int sizeP3L, int *totCallsComboP3Phase, int computeSol);
struct Node* read_file(char * instance_path, int *n, int *D, int *lb, int *ub, double *lc, double *uc, int *lf, int *uf);
void printP3L(P3struct * P3L, int sizeP3L);
double LBp1(int p, Node * nodes, P3struct * P3L, int sizeP3L);
void printNodes(Node * nodes, int n);
void CminCmaxLBFilter_LBUpdate(Prob *pr, Node *nodes);
void printProblem(Prob *pr);
void printSolution(Prob *pr,  Node *nodes);
int getExcessSupply(Prob *pr, Node *nodes);
void LBp1_all(Node * nodes, P3struct * P3L, Prob * pr, int n, int sizeP3L);
void printPotentialPartials(Node * nodes, int n);
void printNode(Node * nodes, int i);
//void bounds_P3lambda(double* lb_ub, double lambda, P3struct * P3L, int* p3_incumbent_idx, int sizeP3L);
void LB_UBxp1(int p, Node * nodes, P3struct * P3L, Prob * pr, int sizeP3L);
void LB_UBxp1_all(Node * nodes, P3struct * P3L, Prob * pr, int n, int sizeP3L); 
void LBxp3_all(Node * nodes, int n, Prob * pr);
void LBxp3_all_efficient(Node * nodes, int n, Prob * pr);
struct LRstruct * baseLR(Node * nodes, Prob * pr, int n, Node ** ptrLRnodesC);
void LBp2_LB_UBxp2_all(Node * nodes, Prob * pr, int n);
void LBp2_LB_UBxp2_all_efficient(Node * nodes, Prob * pr, int n);
void printLR(LRstruct * LR);
void printNodesLR(LRstruct * LR,  Node ** ptrLRnodesC);
void outputJulia(Node * nodes, int n);
void outputFileKlose(Node * nodes, int n, int D, int file_idx);
void outputFileGurobi(Node * nodes, int n, int D, char * gen_str, int file_idx);
void outputFileFinal(Node * nodes, int n, int D, char * instance_name, int i);
void printNodeDetailed(Node * nodes, int i);
void printNodesDetailed(Node * nodes, int n);
double solveKnapsackFixedPartial(int p, Node * nodes, Prob *pr, int * z, int verbose, int *totNodesKpExactPhase);
double solveKnapsackFixedPartial_all(Node * nodes, Prob *pr, int *totCallsComboExactPhase, int verbose, int *totNodesKpExactPhase, int computeSol);
void LB_UB_Dantzig_modif(Prob *pr, Node *nodes, int computeSol);
void linear_filtering(Prob *pr, Node *nodes);
void linear_filtering_improved(Prob *pr, Node *nodes);
void linear_filtering_improved_Q(Prob *pr, Node *nodes);
double setMinCjToZero(Prob *pr, Node *nodes);
double solveSSFCTP_detailed(Node *nodes, Prob *pr, Res *res, int do_posCostsRed, int do_sort, int do_ZLP_ZG, int do_P3, int do_dom, int do_LP, int do_filter, int do_exact, int computeSol, int verbose, int outputSol, int alternative_lambda_init);
double solveSSFCTP(Node *nodes, Prob *pr, Res *res);
double kaa_solve(int * b, double * c, int * f, int D, int n, int * x, int * y);